Symbol table:

abort/4 (abort) @0x142603640
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  First run: 0
  Function flags:
  Called by: main/3 
  Calls: 
main/3 (main) @0x1426034b0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: a/0 (addr)b/1 (addr)
  Referring: 
  Availability: available
  First run: 0
  Function flags: body only_called_at_startup executed_once only_called_at_startup
  Called by: 
  Calls: abort/4 foo/2 (1.00 per call) 
foo/2 (foo) @0x142603320
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: a/0 (write)b/1 (write)
  Referring: 
  Availability: local
  First run: 0
  Function flags: body local nonfreeing_fn executed_once
  Called by: main/3 (1.00 per call) 
  Calls: 
b/1 (b) @0x142700080
  Type: variable definition analyzed
  Visibility: externally_visible public common
  References: 
  Referring: foo/2 (write)main/3 (addr)
  Availability: overwritable
  Varpool flags:
a/0 (a) @0x142700000
  Type: variable definition analyzed
  Visibility: externally_visible public common
  References: 
  Referring: foo/2 (write)main/3 (addr)
  Availability: overwritable
  Varpool flags:


;; Function main (main, funcdef_no=1, decl_uid=1462, cgraph_uid=1, symbol_order=3) (executed once)

Modification phase of node main/3
main ()
{
  int _3;

  <bb 2>:
  _3 = foo (&a, &b);
  if (_3 != 1)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  abort ();

  <bb 4>:
  return 0;

}



;; Function foo (foo, funcdef_no=0, decl_uid=1457, cgraph_uid=0, symbol_order=2) (executed once)

Modification phase of node foo/2
  Adjusting alignment of param 0 to 4, misalignment to 0
  Adjusting alignment of param 1 to 4, misalignment to 0
foo (int * p, int * q)
{
  int res;

  <bb 2>:
  *p_2(D) = 1;
  *q_4(D) = 0;
  res_6 = *p_2(D);
  a = 1;
  b = 1;
  return res_6;

}


Generating constraints for global initializers

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
b = NONLOCAL
a = NONLOCAL

Generating constraints for main (main)

foo.arg0 = &a
foo.arg1 = &b
_3 = foo.result
main.clobber = foo.clobber
main.use = foo.use
main.clobber = ESCAPED
main.use = ESCAPED
main.result = &NULL

Generating constraints for foo (foo)

derefaddrtmp = &NONLOCAL
*foo.arg0 = derefaddrtmp
foo.clobber = foo.arg0
derefaddrtmp = &NULL
*foo.arg1 = derefaddrtmp
foo.clobber = foo.arg1
res_6 = *foo.arg0
foo.use = foo.arg0
a = &NONLOCAL
ESCAPED = &NONLOCAL
foo.clobber = &a
b = &NONLOCAL
ESCAPED = &NONLOCAL
foo.clobber = &b
foo.result = res_6


Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Equivalence classes for indirect node id 1 "NULL": pointer 1, location 1
Equivalence classes for indirect node id 2 "ANYTHING": pointer 2, location 2
Equivalence classes for indirect node id 3 "STRING": pointer 3, location 0
Equivalence classes for indirect node id 4 "ESCAPED": pointer 6, location 3
Equivalence classes for indirect node id 5 "NONLOCAL": pointer 4, location 4
Equivalence classes for direct node id 6 "STOREDANYTHING": pointer 0, location 0
Equivalence classes for indirect node id 7 "INTEGER": pointer 7, location 0
Equivalence classes for direct node id 8 "main": pointer 0, location 0
Equivalence classes for direct node id 9 "main.clobber": pointer 11, location 0
Equivalence classes for direct node id 10 "main.use": pointer 12, location 0
Equivalence classes for direct node id 11 "main.result": pointer 13, location 0
Equivalence classes for direct node id 12 "main.varargs": pointer 0, location 0
Equivalence classes for direct node id 13 "foo": pointer 0, location 0
Equivalence classes for direct node id 14 "foo.clobber": pointer 10, location 0
Equivalence classes for direct node id 15 "foo.use": pointer 8, location 0
Equivalence classes for direct node id 16 "foo.result": pointer 15, location 0
Equivalence classes for direct node id 17 "foo.arg0": pointer 8, location 0
Equivalence classes for direct node id 18 "foo.arg1": pointer 9, location 0
Equivalence classes for indirect node id 19 "b": pointer 16, location 5
Equivalence classes for indirect node id 20 "a": pointer 17, location 6
Equivalence classes for direct node id 21 "_3": pointer 15, location 0
Equivalence classes for direct node id 22 "abort": pointer 0, location 0
Equivalence classes for direct node id 23 "derefaddrtmp": pointer 14, location 0
Equivalence classes for direct node id 24 "derefaddrtmp": pointer 13, location 0
Equivalence classes for direct node id 25 "res_6": pointer 15, location 0
STOREDANYTHING is a non-pointer variable, eliminating edges.
main is a non-pointer variable, eliminating edges.
main.varargs is a non-pointer variable, eliminating edges.
foo is a non-pointer variable, eliminating edges.
abort is a non-pointer variable, eliminating edges.
Rewriting constraints and unifying variables
Unifying foo.result to _3
Unifying foo.use to foo.arg0
Unifying derefaddrtmp to main.result
Unifying res_6 to _3
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
main.clobber = { ESCAPED b a }
main.use = { ESCAPED a }
main.result = { NULL }
main.varargs = { }
foo.clobber = { b a }
foo.use = { a } same as foo.arg0
foo.result = { ESCAPED NONLOCAL } same as _3
foo.arg0 = { a }
foo.arg1 = { b }
b = { NULL ESCAPED NONLOCAL }
a = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
abort = { }
derefaddrtmp = { NONLOCAL }
derefaddrtmp = { NULL } same as main.result
res_6 = { ESCAPED NONLOCAL } same as _3
main ()
{
  int _3;

  <bb 2>:
  _3 = foo (&a, &b);
  if (_3 != 1)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  abort ();

  <bb 4>:
  return 0;

}


foo (int * p, int * q)
{
  int res;

  <bb 2>:
  *p_2(D) = 1;
  *q_4(D) = 0;
  res_6 = *p_2(D);
  a = 1;
  b = 1;
  return res_6;

}



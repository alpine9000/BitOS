Symbol table:

abort/2 (abort) @0x142603640
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  First run: 0
  Function flags:
  Called by: main/1 
  Calls: 
main/1 (main) @0x1426034b0
  Type: function definition analyzed
  Visibility: externally_visible public
  References: 
  Referring: 
  Availability: available
  First run: 0
  Function flags: body only_called_at_startup executed_once only_called_at_startup
  Called by: 
  Calls: abort/2 foo/0 (1.00 per call) 
foo/0 (foo) @0x142603320
  Type: function definition analyzed
  Visibility: prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  First run: 0
  Function flags: body local nonfreeing_fn executed_once
  Called by: main/1 (1.00 per call) 
  Calls: 


;; Function main (main, funcdef_no=1, decl_uid=1459, cgraph_uid=1, symbol_order=1) (executed once)

Modification phase of node main/1
main ()
{
  int b;
  int a;
  int _3;

  <bb 2>:
  _3 = foo (&a, &b);
  if (_3 != 1)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  abort ();

  <bb 4>:
  a ={v} {CLOBBER};
  b ={v} {CLOBBER};
  return 0;

}



;; Function foo (foo, funcdef_no=0, decl_uid=1455, cgraph_uid=0, symbol_order=0) (executed once)

Modification phase of node foo/0
  Adjusting alignment of param 0 to 4, misalignment to 0
  Adjusting alignment of param 1 to 4, misalignment to 0
foo (int * p, int * q)
{
  int _6;

  <bb 2>:
  *p_2(D) = 1;
  *q_4(D) = 0;
  _6 = *p_2(D);
  return _6;

}


Generating constraints for global initializers

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Generating constraints for main (main)

foo.arg0 = &a
foo.arg1 = &b
_3 = foo.result
main.use = &a
main.use = &b
main.clobber = foo.clobber
main.use = foo.use
main.clobber = ESCAPED
main.use = ESCAPED
main.result = &NULL

Generating constraints for foo (foo)

derefaddrtmp = &NONLOCAL
*foo.arg0 = derefaddrtmp
foo.clobber = foo.arg0
derefaddrtmp = &NULL
*foo.arg1 = derefaddrtmp
foo.clobber = foo.arg1
_6 = *foo.arg0
foo.use = foo.arg0
foo.result = _6


Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Equivalence classes for indirect node id 1 "NULL": pointer 1, location 1
Equivalence classes for indirect node id 2 "ANYTHING": pointer 2, location 2
Equivalence classes for indirect node id 3 "STRING": pointer 3, location 0
Equivalence classes for indirect node id 4 "ESCAPED": pointer 6, location 3
Equivalence classes for indirect node id 5 "NONLOCAL": pointer 4, location 4
Equivalence classes for direct node id 6 "STOREDANYTHING": pointer 0, location 0
Equivalence classes for indirect node id 7 "INTEGER": pointer 7, location 0
Equivalence classes for direct node id 8 "main": pointer 0, location 0
Equivalence classes for direct node id 9 "main.clobber": pointer 11, location 0
Equivalence classes for direct node id 10 "main.use": pointer 11, location 0
Equivalence classes for direct node id 11 "main.result": pointer 12, location 0
Equivalence classes for direct node id 12 "main.varargs": pointer 0, location 0
Equivalence classes for direct node id 13 "foo": pointer 0, location 0
Equivalence classes for direct node id 14 "foo.clobber": pointer 10, location 0
Equivalence classes for direct node id 15 "foo.use": pointer 8, location 0
Equivalence classes for direct node id 16 "foo.result": pointer 14, location 0
Equivalence classes for direct node id 17 "foo.arg0": pointer 8, location 0
Equivalence classes for direct node id 18 "foo.arg1": pointer 9, location 0
Equivalence classes for indirect node id 19 "a": pointer 15, location 5
Equivalence classes for indirect node id 20 "b": pointer 16, location 6
Equivalence classes for direct node id 21 "_3": pointer 14, location 0
Equivalence classes for direct node id 22 "abort": pointer 0, location 0
Equivalence classes for direct node id 23 "derefaddrtmp": pointer 13, location 0
Equivalence classes for direct node id 24 "derefaddrtmp": pointer 12, location 0
Equivalence classes for direct node id 25 "_6": pointer 14, location 0
STOREDANYTHING is a non-pointer variable, eliminating edges.
main is a non-pointer variable, eliminating edges.
main.varargs is a non-pointer variable, eliminating edges.
foo is a non-pointer variable, eliminating edges.
abort is a non-pointer variable, eliminating edges.
Rewriting constraints and unifying variables
Unifying foo.result to _3
Unifying main.clobber to main.use
Unifying foo.use to foo.arg0
Unifying derefaddrtmp to main.result
Unifying _6 to _3
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
main.clobber = { a b } same as main.use
main.use = { a b }
main.result = { NULL }
main.varargs = { }
foo.clobber = { a b }
foo.use = { a } same as foo.arg0
foo.result = { NONLOCAL } same as _3
foo.arg0 = { a }
foo.arg1 = { b }
a = { NONLOCAL }
b = { NULL }
_3 = { NONLOCAL }
abort = { }
derefaddrtmp = { NONLOCAL }
derefaddrtmp = { NULL } same as main.result
_6 = { NONLOCAL } same as _3
main ()
{
  int b;
  int a;
  int _3;

  <bb 2>:
  _3 = foo (&a, &b);
  if (_3 != 1)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  abort ();

  <bb 4>:
  a ={v} {CLOBBER};
  b ={v} {CLOBBER};
  return 0;

}


foo (int * p, int * q)
{
  int _6;

  <bb 2>:
  *p_2(D) = 1;
  *q_4(D) = 0;
  _6 = *p_2(D);
  return _6;

}



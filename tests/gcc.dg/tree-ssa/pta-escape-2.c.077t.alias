
;; Function foo (foo, funcdef_no=0, decl_uid=1455, cgraph_uid=0, symbol_order=1)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
i = NONLOCAL
i.0_2 = i
derefaddrtmp = &NONLOCAL
*i.0_2 = derefaddrtmp

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Equivalence classes for indirect node id 1 "NULL": pointer 1, location 0
Equivalence classes for indirect node id 2 "ANYTHING": pointer 2, location 1
Equivalence classes for indirect node id 3 "STRING": pointer 3, location 0
Equivalence classes for indirect node id 4 "ESCAPED": pointer 6, location 2
Equivalence classes for indirect node id 5 "NONLOCAL": pointer 4, location 3
Equivalence classes for direct node id 6 "STOREDANYTHING": pointer 0, location 0
Equivalence classes for indirect node id 7 "INTEGER": pointer 7, location 0
Equivalence classes for direct node id 8 "i.0_2": pointer 4, location 0
Equivalence classes for direct node id 9 "i": pointer 4, location 0
Equivalence classes for direct node id 10 "derefaddrtmp": pointer 8, location 0
STOREDANYTHING is a non-pointer variable, eliminating edges.
Rewriting constraints and unifying variables
Unifying i.0_2 to i
Uniting pointer but not location equivalent variables
Unifying NONLOCAL to i
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as i
STOREDANYTHING = { }
INTEGER = { ANYTHING }
i.0_2 = { ESCAPED NONLOCAL } same as i
i = { ESCAPED NONLOCAL }
derefaddrtmp = { NONLOCAL }


Alias information for foo

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

i.0_2, points-to non-local, points-to escaped, points-to vars: { }

foo ()
{
  int * i.0_2;

  <bb 2>:
  i.0_2 = i;
  *i.0_2 = 1;
  return;

}



;; Function bar (bar, funcdef_no=1, decl_uid=1459, cgraph_uid=1, symbol_order=2)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
local_p = &NONLOCAL
q = &NONLOCAL
x = &NULL
q_1 = &j
q_1 = q
derefaddrtmp = &x
*q_1 = derefaddrtmp
_8 = x
ESCAPED = _8

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Equivalence classes for indirect node id 1 "NULL": pointer 1, location 1
Equivalence classes for indirect node id 2 "ANYTHING": pointer 2, location 2
Equivalence classes for indirect node id 3 "STRING": pointer 3, location 0
Equivalence classes for indirect node id 4 "ESCAPED": pointer 7, location 3
Equivalence classes for indirect node id 5 "NONLOCAL": pointer 5, location 4
Equivalence classes for direct node id 6 "STOREDANYTHING": pointer 0, location 0
Equivalence classes for indirect node id 7 "INTEGER": pointer 8, location 0
Equivalence classes for direct node id 8 "local_p": pointer 9, location 0
Equivalence classes for direct node id 9 "q": pointer 9, location 0
Equivalence classes for indirect node id 10 "x": pointer 4, location 5
Equivalence classes for direct node id 11 "q_1": pointer 10, location 0
Equivalence classes for indirect node id 12 "j": pointer 11, location 6
Equivalence classes for direct node id 13 "derefaddrtmp": pointer 12, location 0
Equivalence classes for direct node id 14 "foo": pointer 0, location 0
Equivalence classes for direct node id 15 "_8": pointer 4, location 0
STOREDANYTHING is a non-pointer variable, eliminating edges.
foo is a non-pointer variable, eliminating edges.
Rewriting constraints and unifying variables
Unifying q to local_p
Uniting pointer but not location equivalent variables
Unifying x to _8
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL x }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
local_p = { NONLOCAL }
q = { NONLOCAL } same as local_p
x = { NULL ESCAPED NONLOCAL } same as _8
q_1 = { NONLOCAL j }
j = { x }
derefaddrtmp = { x }
foo = { }
_8 = { NULL ESCAPED NONLOCAL }


Alias information for bar

Aliased symbols

j, UID D.1462, int *, is addressable
x, UID D.1461, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.1461 } (escaped)

Flow-insensitive points-to information

q_1, points-to non-local, points-to vars: { D.1462 }
q_5(D), points-to non-local, points-to vars: { }

bar (int local_p, int * * q)
{
  int * j;
  int x;
  int _8;

  <bb 2>:
  x = 0;
  if (local_p_4(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # q_1 = PHI <&j(2), q_5(D)(3)>
  *q_1 = &x;
  foo ();
  _8 = x;
  x ={v} {CLOBBER};
  j ={v} {CLOBBER};
  return _8;

}



;; Function main (main, funcdef_no=2, decl_uid=1466, cgraph_uid=2, symbol_order=3) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
k = &NONLOCAL
i = NONLOCAL
i = &k
ESCAPED = &k
ESCAPED = &NONLOCAL
ESCAPED = &i
_5 = NONLOCAL
k.1_6 = k
ESCAPED = &NULL
ESCAPED = &i
_8 = NONLOCAL
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Found location equivalence for node i
Equivalence classes for indirect node id 1 "NULL": pointer 1, location 1
Equivalence classes for indirect node id 2 "ANYTHING": pointer 2, location 2
Equivalence classes for indirect node id 3 "STRING": pointer 3, location 0
Equivalence classes for indirect node id 4 "ESCAPED": pointer 6, location 3
Equivalence classes for indirect node id 5 "NONLOCAL": pointer 4, location 4
Equivalence classes for direct node id 6 "STOREDANYTHING": pointer 0, location 0
Equivalence classes for indirect node id 7 "INTEGER": pointer 7, location 0
Equivalence classes for indirect node id 8 "k": pointer 8, location 5
Equivalence classes for indirect node id 9 "i": pointer 9, location 1
Equivalence classes for direct node id 10 "bar": pointer 0, location 0
Equivalence classes for direct node id 11 "_5": pointer 4, location 0
Equivalence classes for direct node id 12 "k.1_6": pointer 8, location 0
Equivalence classes for direct node id 13 "abort": pointer 0, location 0
Equivalence classes for direct node id 14 "_8": pointer 4, location 0
STOREDANYTHING is a non-pointer variable, eliminating edges.
bar is a non-pointer variable, eliminating edges.
abort is a non-pointer variable, eliminating edges.
Rewriting constraints and unifying variables
Unifying _8 to _5
Uniting pointer but not location equivalent variables
Unifying NONLOCAL to _5
Unifying k to k.1_6
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL k i }
NONLOCAL = { ESCAPED NONLOCAL } same as _5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
k = { ESCAPED NONLOCAL } same as k.1_6
i = { ESCAPED NONLOCAL k }
bar = { }
_5 = { ESCAPED NONLOCAL }
k.1_6 = { ESCAPED NONLOCAL }
abort = { }
_8 = { ESCAPED NONLOCAL } same as _5


Alias information for main

Aliased symbols

k, UID D.1468, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.1453 D.1468 } (nonlocal, escaped)

Flow-insensitive points-to information


main ()
{
  int k;
  int _5;
  int k.1_6;
  int _8;

  <bb 2>:
  k = 2;
  i = &k;
  _5 = bar (1, &i);
  if (_5 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;

  <bb 3>:
  k.1_6 = k;
  if (k.1_6 != 1)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  abort ();

  <bb 5>:
  _8 = bar (0, &i);
  if (_8 != 1)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  abort ();

  <bb 7>:
  k ={v} {CLOBBER};
  return 0;

}



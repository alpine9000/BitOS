
;; Function foo (foo, funcdef_no=0, decl_uid=1458, cgraph_uid=0, symbol_order=2)

Creating dr for a[i_7]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &a
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 32
	base_object: a
	Access function 0: {1, +, 1}_1
Creating dr for b[i_7]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
success.
	base_address: &b
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	aligned to: 32
	base_object: b
	Access function 0: {1, +, 1}_1
(rdg
(vertex 0: () (in: 2 1) (out: 1)
i_12 = PHI <i_7(5), 0(2)>
)
(vertex 1: () (in: 2 0) (out: 2 5 5 4 3 0)
i_7 = i_12 + 1;
)
(vertex 2: () (in: 2 1) (out: 4 3 2 1 0)
if (i_7 != 1024)
)
(vertex 3: (w) (in: 2 1) (out:)
# .MEM_5 = VDEF <.MEM_2>
a[i_7] = 0;
)
(vertex 4: () (in: 2 1) (out: 5)
if (i_7 > 100)
)
(vertex 5: (w) (in: 4 1 1) (out:)
# .MEM_6 = VDEF <.MEM_5>
b[i_7] = i_7;
)
)
ldist asked to generate code for vertex 3
ldist useful partition:
0, 1, 2, 3
ldist asked to generate code for vertex 5
ldist useful partition:
0, 1, 2, 4, 5
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) != 1024
  bounds on difference of bases: 1023 ... 1023
  result:
    # of iterations 1023, bounded by 1023
(compute_affine_dependence
  stmt_a: a[i_7] = 0;
  stmt_b: b[i_7] = i_7;
) -> no dependence

first = 0x142802f08 current = 0x142802f08 indx = 0
	0x142802f08 next = 0x0 prev = 0x0 indx = 0
		bits = { 0 1 2 3 }

first = 0x142802e70 current = 0x142802e70 indx = 0
	0x142802e70 next = 0x0 prev = 0x0 indx = 0
		bits = { 0 1 2 4 5 }
generated memset zero
ldist-22.c:12:3: note: Loop 1 distributed: split to 1 loops and 1 library calls.

Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement a[0] = 0;
Updating SSA information for statement __builtin_memset (_11, 0, 4092);
Registering new PHI nodes in block #6
Registering new PHI nodes in block #3
Registering new PHI nodes in block #4
Updating SSA information for statement b[i_7] = i_7;
Registering new PHI nodes in block #5
Registering new PHI nodes in block #7
Updating SSA information for statement return;

Symbols to be put in SSA form
{ D.1481 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 8
Number of blocks to update: 7 ( 88%)
Affected blocks: 0 2 3 4 5 6 7


foo ()
{
  int i;
  int[1024] * _11;

  <bb 2>:
  a[0] = 0;
  _11 = &a + 4;
  __builtin_memset (_11, 0, 4092);
  goto <bb 6>;

  <bb 3>:
  if (i_7 > 100)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  b[i_7] = i_7;

  <bb 5>:

  <bb 6>:
  # i_12 = PHI <i_7(5), 0(2)>
  i_7 = i_12 + 1;
  if (i_7 != 1024)
    goto <bb 3>;
  else
    goto <bb 7>;

  <bb 7>:
  return;

}


